<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- 테스트 -->
 <mapper namespace="com.community.post.mapper.PostMapper">
 	<select id="selectPostListTest" resultType="map">
 		SELECT
 			*
 		FROM
 			`post`
 	</select>
 	
 	<!-- 게시물 목록 조회 페이지 -->
 	<select id="selectPostList" parameterType="map" resultType="com.community.post.domain.Post">
 		SELECT
 			`id`
			,`userId`
			,`subject`
			,`content`
			,`createdAt`
			,`updatedAt`
		FROM
			`post`
		<where>
			<if test="direction == 'next'">
			<![CDATA[
				`id` < #{standardId}
			]]>
				ORDER BY `id` DESC
			</if>
			<if test="direction == 'prev'">
				<![CDATA[
				`id` > #{standardId}
			]]>
			</if>
		</where>
			<if test="direction == null">
				ORDER BY `id` DESC
			</if>
		LIMIT ${limit}
 	</select>
 	
 	<select id="selectPostIdAsSort" parameterType="String" resultType="int">
 		SELECT
 			`id`
 		FROM
 			`post`
 		ORDER BY `id` ${sort}
 		LIMIT 1
 	</select>
 	
 	<!-- 글 번호로 글 조회 -->
 	<select id="selectPostByPostId" parameterType="int" resultType="com.community.post.domain.Post">
 		SELECT
 			`id`
			,`userId`
			,`subject`
			,`content`
			,`createdAt`
			,`updatedAt`
		FROM
			`post`
		WHERE
			`id` = #{postId}
 	</select>
 	
 	
 	<!-- 게시물 생성 -->
 	<insert id="insertPost" useGeneratedKeys="true" keyProperty="id" parameterType="com.community.post.domain.Post">
 		INSERT INTO `post`
 		(
 			`userId`
			,`subject`
			,`content`
			,`createdAt`
			,`updatedAt`
 		)
 		VALUES
 		(
 			#{userId}
 			, #{subject}
 			, #{content}
 			, NOW()
 			, NOW()
 		)
 	</insert>
 	
 	<delete id="PostDelete" parameterType="int">
 		DELETE FROM `post`
 		WHERE
 			`id` = #{postId}
 	</delete>
 	
 	<update id="updatePostByPostId" parameterType="map">
 		UPDATE `post`
 		SET
 			`subject` = #{subject}
 			, `content` = #{content}
 			, `updatedAt` = NOW()
 		WHERE
 			`id` = #{postId}
 	</update>
 	
 	
 	<!-- 최신순 인기순 -->
 	<select id="selectPostListByLikeRank" resultType="com.community.post.domain.Post">
    SELECT
        p.`id`,
        p.`userId`,
        p.`subject`,
        p.`content`,
        p.`createdAt`,
        p.`updatedAt`,
        IFNULL(l.like_count, 0) AS like_count
    FROM
        `post` AS p
    LEFT JOIN (
        SELECT
            `postId`,
            COUNT(*) AS like_count
        FROM
            `like`
        GROUP BY
            `postId`
    ) AS l
    ON p.`id` = l.`postId`
    ORDER BY
        like_count DESC;
	</select>
 	
 </mapper>